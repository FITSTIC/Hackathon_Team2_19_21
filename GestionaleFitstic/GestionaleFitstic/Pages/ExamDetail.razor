@page "/examdetail/{ExamId:int}"
@page "/examdetail"

@using GestionaleFitstic.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject NavigationManager Navi
@inject IJSRuntime JSRuntime
<!-- FORM EDIT -->

@if (ExamId == 0)
{
    <h3>Stai creando un nuovo esame</h3>
}
else
{
    <h3>Modifica l'esame di @e.Student.Surname @e.Student.Name</h3>
}

<EditForm Model="@e" OnValidSubmit="()=>SaveExam()" OnInvalidSubmit="()=>CompleteFields()">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label>Alunno</label>
        <InputSelectNumber class="form-control" id="student" @bind-Value="e.StudentId">
            <option value="">Scegli uno studente</option>
            @foreach (var student in students)
            {
                <option value="@student.Id">@student.Surname @student.Name</option>
            }
        </InputSelectNumber>
    </div>
    <div class="form-group">
        <label>Modulo</label>
        <InputSelectNumber class="form-control" id="module" @bind-Value="e.ModuleId">
            <option value="">Scegli un modulo</option>
            @foreach (var module in modules)
            {
                <option value="@module.Id">@module.Name</option>
            }
        </InputSelectNumber>
    </div>
    <div class="form-group">
        <label>Data dell'esame</label>
        <InputDate class="form-control" id="examDate" @bind-Value="e.Date" />
    </div>
    <div class="form-group">
        <label>Voto</label>
        <InputNumber class="form-control" id="grade" @bind-Value="e.Grade" />
    </div>
    <button type="submit" class="btn btn-success">Salva modifiche</button>
</EditForm>

@code {
    [Parameter]
    public int ExamId { get; set; }
    private Exam e;
    private Student[] students;
    private Module[] modules;
    string saveMessage = "Vuoi salvare i cambiamenti?";
    string fillFieldsMessage = "Completa correttamente tutti i campi evidenziati in rosso per continuare";


    protected override async Task OnInitializedAsync()
    {
        students = await db.Students
            //.AsNoTracking() //per reperire dati in sola lettura
            .OrderBy(x => x.Surname)
            .ToArrayAsync();

        modules = await db.Modules
            //.AsNoTracking() 
            .OrderBy(x => x.Name)
            .ToArrayAsync();

        if (ExamId == 0)
        {
            e = new Exam()
            {
                Date = DateTime.Now,
            };
        }
        else
        {
            e = await db.Exams.FindAsync(ExamId);
        }
    }

    private async Task CompleteFields()
    {
        await JSRuntime.InvokeAsync<object>("alert", fillFieldsMessage);
    }

    private async Task SaveExam()
    {
        bool resultY = await ConfirmSave();
        if (resultY)
        {
            if (ExamId == 0)
            {
                db.Exams.Add(e);
                await db.SaveChangesAsync();
            }
            else
            {
                await db.SaveChangesAsync();
            }
            Navi.NavigateTo("/exams");
        }
    }

    private async Task<bool> ConfirmSave()
    {
        bool result = await JSRuntime.InvokeAsync<bool>("confirm", new[] { saveMessage });
        return result;
    }
} 