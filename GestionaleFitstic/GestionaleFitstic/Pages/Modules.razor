@page "/modules"

@using GestionaleFitstic.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<!--DATATABLE-->
<h1>Moduli del corso</h1>
<input type="text" id="searchInput" placeholder="Scrivi qui la tua ricerca..">
<button class="btn btn-info" @onclick="(()=>Search())"><i class="material-icons">search</i>&nbsp; Cerca</button>

@if (modules.Length == 0)
{
    <br>
    <p><b>Questa pagina è vuota. Crea un nuovo modulo per visualizzare i dati</b></p>
    <br>
    <a href="/moduledetail" class="btn btn-primary" style="float:right"><i class="material-icons">add</i>&nbsp; Nuovo modulo</a>
}

else
{
    <a href="/moduledetail" class="btn btn-primary" style="float:right"><i class="material-icons">add</i>&nbsp; Nuovo modulo</a>
    <table id="dataTable" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>Nome del modulo</th>
                <th>Materia insegnata</th>
                <th>Corso di appartenenza</th>
                <th>Data di inizio</th>
                <th>Data di fine</th>
                <th>Docente</th>
                <th>Tutor</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var module in modules)
            {
                <tr>
                    <td>@(module.Name.Substring(0, 1).ToUpper() + module.Name.Substring(1).ToLower())</td>
                    <td>@(module.Subject.Substring(0, 1).ToUpper() + module.Subject.Substring(1).ToLower())</td>
                    <td>@module.Course?.Name</td>
                    <td>@module.StartDate.ToString("dd/MM/yyyy")</td>
                    <td>@module.EndDate.ToString("dd/MM/yyyy")</td>
                    <td>@module.Teacher?.Name @module.Teacher?.Surname</td>
                    <td>@module.Tutor?.Name @module.Tutor?.Surname</td>
                    <td><button class="btn btn-danger" @onclick="@(() => DeleteModule(module))"><i class="material-icons">delete_forever</i>&nbsp; Elimina</button></td>
                    <td><a class="btn btn-warning" href="/moduledetail/@module.Id"><i class="material-icons">edit</i>&nbsp; Dettagli</a></td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private Module[] modules;
    string message = "Stai per eliminare un modulo, sei sicuro?";

    protected override async Task OnInitializedAsync()
    {
        modules = await db.Modules
            .OrderBy(x => x.StartDate)
            .Include(x => x.Course)
            .Include(x => x.Teacher)
            .Include(x => x.Tutor)
            .ToArrayAsync();
    }

    private async Task DeleteModule(Module m)
    {
        bool resultY = await ConfirmDelete();
        if (resultY)
        {

            db.Modules.Remove(m);
            db.SaveChanges();
            modules = await db.Modules
                .OrderBy(x => x.StartDate)
                .Include(x => x.Course)
                .Include(x => x.Teacher)
                .Include(x => x.Tutor)
                .ToArrayAsync();
            StateHasChanged();
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        bool result = await JSRuntime.InvokeAsync<bool>("confirm", new[] { message });
        return result;
    }

    private async Task Search()
    {
        await JSRuntime.InvokeVoidAsync("search");
    }

}
