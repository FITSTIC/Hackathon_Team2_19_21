@page "/registrationdetail/{RegistrationId:int}"
@page "/registrationdetail"

@using GestionaleFitstic.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject NavigationManager Navi
@inject IJSRuntime JSRuntime
<!-- FORM EDIT -->

@if (RegistrationId == 0)
{
    <h3>Iscrivi un nuovo studente</h3>
}
else
{
    <h3>Modifica iscrizione di @r.Student.Surname @r.Student.Name</h3>
}

<EditForm Model="@r" OnValidSubmit="()=>SaveRegistration()">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Data di iscrizione</label>
        <InputDate class="form-control" id="regDate" @bind-Value="r.RegDate"/>            
    </div>
    <div class="form-group">
        <label>Partecipante</label>        
        <InputSelectNumber class="form-control" id="student" @bind-Value="r.StudentId">
            <option value="">Scegli uno studente</option>
            @foreach (var student in students)
            {
                <option value="@student.Id">@student.Surname @student.Name</option>
            }
        </InputSelectNumber>
    </div>
    <div class="form-group">
        <label>Iscrivi al corso</label>
        <InputSelectNumber class="form-control" id="course" @bind-Value="r.CourseId">
            <option value="">Scegli un corso</option>
            @foreach (var course in courses)
            {
                <option value="@course.Id">@course.Name</option>
            }
        </InputSelectNumber>
    </div>
    <button type="submit" class="btn btn-success">Salva modifiche</button>
</EditForm>

@code {
    [Parameter]
    public int RegistrationId { get; set; }
    private Registration r;
    private Student[] students;
    private Course[] courses;
    string message = "Vuoi salvare i cambiamenti?";

    protected override async Task OnInitializedAsync()
    {
        students = await db.Students
            //.AsNoTracking() //per reperire dati in sola lettura
            .OrderBy(x => x.Surname)
            .ToArrayAsync();

        courses = await db.Courses
            //.AsNoTracking()
            .OrderBy(x => x.Name)
            .ToArrayAsync();

        if (RegistrationId == 0)
        {
            r = new Registration()
            {
                RegDate = DateTime.Now               
            };
        }
        else
        {
            r = await db.Registrations.FindAsync(RegistrationId);
        }
    }

    private async Task SaveRegistration()
    {
        bool resultY = await ConfirmSave();
        if (resultY)
        {
            if (RegistrationId == 0)
            {
                db.Registrations.Add(r);
                await db.SaveChangesAsync();
            }
            else
            {
                await db.SaveChangesAsync();
            }
            Navi.NavigateTo("/registrations");
        }
    }

    private async Task<bool> ConfirmSave()
    {
        bool result = await JSRuntime.InvokeAsync<bool>("confirm", new[] { message });
        return result;
    }
} 