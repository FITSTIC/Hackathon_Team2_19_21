@page "/staffdetail/{StaffId:int}"
@page "/staffdetail"

@using GestionaleFitstic.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject NavigationManager Navi
@inject IJSRuntime JSRuntime
<!-- FORM EDIT -->

@if (StaffId == 0)
{
    <h3>Stai inserendo un nuovo membro dello staff</h3>
}
else
{
    <h3>Modifica i dati di @st.Name @st.Surname</h3>
}

<EditForm Model="@st" OnValidSubmit="() => SaveStaff()" OnInvalidSubmit="()=>CompleteFields()">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Nome</label>
        <InputText class="form-control" id="name" @bind-Value="st.Name" />
    </div>
    <div class="form-group">
        <label>Cognome</label>
        <InputText class="form-control" id="surname" @bind-Value="st.Surname" />
    </div>
    <div class="form-group">
        <label>Data di nascita</label>
        <InputDate class="form-control" id="birthDate" @bind-Value="st.BirthDate" />
    </div>
    <div class="form-group">
        <label>Mansione</label>
        <InputSelect class="form-control" @bind-Value="st.Jobs">
            <option value="">Mansione</option>
            @foreach (var job in Enum.GetValues(typeof(JobType)))
            {
                <option value="@job">@job</option>
            }
        </InputSelect>
    </div>
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" id="email" @bind-Value="st.Email" />
        </div>
        <div class="form-group">
            <label>Telefono</label>
            <InputText class="form-control" id="phoneNumber" @bind-Value="st.PhoneNumber" />
        </div>

        <div class="form-group">
            <label>Data di assunzione</label>
            <InputDate class="form-control" id="start date" @bind-Value="st.StartDate" />
        </div>
        <button type="submit" class="btn btn-success">Salva modifiche</button>
</EditForm>

@code {    
    private Staff st;
    [Parameter]
    public int StaffId { get; set; }
    string saveMessage = "Vuoi salvare i cambiamenti?";
    string fillFieldsMessage = "Completa correttamente tutti i campi evidenziati in rosso per continuare";

    protected override async Task OnInitializedAsync()
    {
        if (StaffId == 0)
        {
            st = new Staff()
            {
                BirthDate = DateTime.Now,
                StartDate = DateTime.Now
            };
        }
        else
        {
            st = await db.Staffs.FindAsync(StaffId);
        }
    }

    private async Task CompleteFields()
    {
        await JSRuntime.InvokeAsync<object>("alert", fillFieldsMessage);
    }

    private async Task SaveStaff()
    {
        st.Name = st.Name.Substring(0,1).ToUpper() + st.Name.Substring(1).ToLower();
        st.Surname = st.Surname.Substring(0,1).ToUpper() + st.Surname.Substring(1).ToLower();
        st.Email = st.Email.ToLower();
        bool resultY = await ConfirmSave();
        if (resultY)
        {
            if (StaffId == 0)
            {
                db.Staffs.Add(st);
                await db.SaveChangesAsync();
                StateHasChanged();
            }
            else
            {
                await db.SaveChangesAsync();
            }
            Navi.NavigateTo("/staffs");
        }
    }

    private async Task<bool> ConfirmSave()
    {
        bool result = await JSRuntime.InvokeAsync<bool>("confirm", new[] { saveMessage });
        return result;
    }
}