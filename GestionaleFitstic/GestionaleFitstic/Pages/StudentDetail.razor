@page "/studentdetail/{StudentId:int}"
@page "/studentdetail"

@using GestionaleFitstic.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject IJSRuntime JSRuntime
@inject NavigationManager Navi
<!-- FORM EDIT -->

@if (StudentId == 0)
{
    <h3>Stai inserendo un nuovo alunno</h3>
}
else
{
    <h3>Modifica i dati di @st.Name @st.Surname</h3>
}

<EditForm Model="@st" OnValidSubmit="() => SaveStudent()" OnInvalidSubmit="()=>CompleteFields()">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Nome</label>
        <InputText class="form-control" id="name" @bind-Value="st.Name" />
    </div>
    <div class="form-group">
        <label>Cognome</label>
        <InputText class="form-control" id="surname" @bind-Value="st.Surname" />
    </div>
    <div class="form-group">
        <label>Data di nascita</label>
        <InputDate class="form-control" id="birthDate" @bind-Value="st.BirthDate" />
    </div>
    <div class="form-group">
        <label>Indirizzo</label>
        <InputText class="form-control" id="address" @bind-Value="st.Address" />
    </div>
    <div class="form-group">
        <label>Città</label>
        <InputText class="form-control" id="city" @bind-Value="st.City" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" id="email" @bind-Value="st.Email" />
    </div>
    <div class="form-group">
        <label>Cellulare</label>
        <InputText class="form-control" id="phoneNumber" @bind-Value="st.PhoneNumber" />
    </div>
    <div class="form-group">
        <label>Tipo di diploma</label>
        <InputText class="form-control" id="diplomaType" @bind-Value="st.DiplomaType" />
    </div>
    <div class="form-group">
        <label>Anno di diploma</label>
        <InputNumber class="form-control" id="diplomaYear" @bind-Value="st.DiplomaYear" />
    </div>
    <button type="submit" class="btn btn-success">Salva modifiche</button>

</EditForm>

@code {
    [Parameter]
    public int StudentId { get; set; }
    private Student st;
    string saveMessage = "Vuoi salvare i cambiamenti?";
    string fillFieldsMessage = "Completa correttamente tutti i campi evidenziati in rosso per continuare";


    protected override async Task OnInitializedAsync()
    {
        if (StudentId == 0)
        {
            st = new Student()
            {
                BirthDate = DateTime.Now,
                DiplomaYear = 2000
            };
        }
        else
        {
            st = await db.Students.FindAsync(StudentId);
        }
    }

    private async Task CompleteFields()
    {
        await JSRuntime.InvokeAsync<object>("alert", fillFieldsMessage);
    }

    private async Task SaveStudent()
    {
        st.Name = st.Name.Substring(0,1).ToUpper() + st.Name.Substring(1).ToLower();
        st.Surname = st.Surname.Substring(0,1).ToUpper() + st.Surname.Substring(1).ToLower();
        st.Address = st.Address.ToLower();
        st.City = st.City.Substring(0,1).ToUpper() + st.City.Substring(1).ToLower();
        st.Email = st.Email.ToLower();
        st.DiplomaType = st.DiplomaType.Substring(0,1).ToUpper() + st.DiplomaType.Substring(1).ToLower();
        bool resultY = await ConfirmSave();
        if (resultY)
        {
            if (StudentId == 0)
            {
                db.Students.Add(st);
                await db.SaveChangesAsync();
                StateHasChanged();
            }
            else
            {
                await db.SaveChangesAsync();
            }
            Navi.NavigateTo("/students");
        }
    }

    private async Task<bool> ConfirmSave()
    {
        bool result = await JSRuntime.InvokeAsync<bool>("confirm", new[] { saveMessage });
        return result;
    }
}