@page "/students"

@using GestionaleFitstic.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db
@inject IJSRuntime JSRuntime
<!--TABLE-->
<h1>Partecipanti al corso</h1>
<a href="/studentdetail" class="btn btn-primary">Nuovo alunno</a>

@if (students == null)
{
}
else
{
<table id="courses" class="table table-striped table-bordered" style="width:100%">
    <thead>
        <tr>
            <th>Cognome</th>
            <th>Nome</th>
            <th>Data di nascita</th>
            <th>Indirizzo</th>
            <th>Città</th>
            <th>Email</th>
            <th>Cellulare</th>
            <th>Diploma</th>
            <th>Diplomato nel</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
         {
            <tr>
                <td>@(student.Surname.Substring(0,1).ToUpper() + student.Surname.Substring(1).ToLower())</td>
                <td>@(student.Name.Substring(0,1).ToUpper() + student.Name.Substring(1).ToLower())</td>
                <td>@student.BirthDate.ToString("dd/MM/yyyy")</td>
                <td>@student.Address.ToLower()</td>
                <td>@(student.City.Substring(0,1).ToUpper() + student.City.Substring(1).ToLower())</td>
                <td>@student.Email.ToLower()</td>
                <td>@student.PhoneNumber</td>
                <td>@(student.DiplomaType.Substring(0,1).ToUpper() + student.DiplomaType.Substring(1).ToLower())</td>
                <td>@student.DiplomaYear</td>
                <td><button class="btn btn-danger" @onclick="@(() => DeleteStudent(student))">Elimina</button></td>
                <td><a class="btn btn-warning" href="/studentdetail/@student.Id">Modifica</a></td>
            </tr>
         }
    </tbody>
</table>

    @code {
        private Student[] students;
        string message = "Stai eliminando uno studente, sei sicuro?";

        protected override async Task OnInitializedAsync()
        {
            students = await db.Students
                .OrderBy(x=>x.Surname)
                .ToArrayAsync();
        }

        private async Task DeleteStudent(Student s)
        {
            bool resultY = await ConfirmDelete();
            if (resultY)
            {
                db.Students.Remove(s);
                db.SaveChanges();
                students = db.Students
                    .OrderBy(x => x.Surname)
                    .ToArray();
                StateHasChanged();
            }
        }

        private async Task<bool> ConfirmDelete()
        {
            bool result = await JSRuntime.InvokeAsync<bool>("confirm", new[] { message });
            return result;
        }
    }
}
